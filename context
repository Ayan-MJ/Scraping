You are Cursor, an AI coding assistant.
Repo: github.com/Ayan-MJ/scraping-wizard

Current State:
- Frontend: Next.js app in `frontend/`, fully wired to backend and Supabase Auth.
- Backend: FastAPI service in `backend/`, containerized via Docker, connected to Supabase and Redis.

Next Objective:
Create GitHub Actions workflows for automated CI/CD:

1. **frontend/.github/workflows/frontend.yml**  
   - Trigger: `push` and `pull_request` on `main`
   - Steps:
     • actions/checkout  
     • setup-node@v3 (use Node 16)  
     • `npm ci`, `npm run lint`, `npm test`, `npm run build` in `frontend/`  
     • Deploy to Vercel via `amondnet/vercel-action@v20` using secrets: `VERCEL_TOKEN`, `VERCEL_ORG_ID`, `VERCEL_PROJECT_ID`

2. **backend/.github/workflows/backend.yml**  
   - Trigger: `push` and `pull_request` on `main`
   - Steps:
     • actions/checkout  
     • setup-python@v4 (use Python 3.10)  
     • Install Poetry, then `poetry install --no-dev` in `backend/`  
     • `poetry run flake8` and `poetry run pytest`  
     • Build Docker image `scraping-wizard-api:latest`  
     • Log in and push to GitHub Container Registry (use secret `CR_PAT`)  
     • Deploy to AWS ECS via AWS CLI, using secrets: `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`, `ECS_CLUSTER`, `ECS_SERVICE`

Environment & Secrets:
- Frontend: `VERCEL_TOKEN`, `VERCEL_ORG_ID`, `VERCEL_PROJECT_ID`  
- Backend: `CR_PAT`, `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`, `ECS_CLUSTER`, `ECS_SERVICE`  
