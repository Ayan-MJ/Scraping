You are Cursor, an AI coding assistant.
Repo: github.com/Ayan-MJ/scraping

Frontend:
- Next.js (App Router), TypeScript, React Query, Tailwind.
- Already integrated with Supabase Auth, SSE, Axios API client.

Backend:
- FastAPI service, Celery worker, Playwright.
- Dockerized, deployed to AWS ECS.

Next Objective: Instrument both frontend and backend with Sentry for error and performance monitoring, and add LogRocket (or GA4) for frontend session analytics.

Details:
1. **Frontend (Next.js)**  
   - Install `@sentry/nextjs` and configure DSN via `NEXT_PUBLIC_SENTRY_DSN`.  
   - Wrap `_app.tsx` with Sentryâ€™s `withSentry`.  
   - Capture performance metrics (tracesSampleRate=0.2).  
   - Optionally install `logrocket` and initialize in `_app.tsx` with `LOGROCKET_APP_ID`.

2. **Backend (FastAPI)**  
   - Install `sentry-sdk[fastapi]`.  
   - In `app/main.py`, initialize Sentry with:
     ```python
     import sentry_sdk
     from sentry_sdk.integrations.fastapi import FastApiIntegration

     sentry_sdk.init(
         dsn=settings.SENTRY_DSN,
         integrations=[FastApiIntegration()],
         traces_sample_rate=0.1,
     )
     ```
   - Wrap Celery tasks to capture exceptions automatically (using `CeleryIntegration`).

3. **Environment & Secrets**  
   - Add `NEXT_PUBLIC_SENTRY_DSN` to frontend env.  
   - Add `SENTRY_DSN` to backend env.  
   - Ensure sensitive keys are stored securely in GitHub Secrets.

4. **Verification**  
   - Trigger a test exception on frontend (e.g., in a dev-only route) and confirm it shows up in Sentry.  
   - Throw a test error in a FastAPI endpoint and confirm backend capture.

Keep existing code style, async/await, and ensure no break in functionality.
